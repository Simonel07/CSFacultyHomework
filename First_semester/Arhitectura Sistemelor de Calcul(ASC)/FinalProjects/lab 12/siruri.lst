     1                                  bits 32         
     2                                  
     3                                  global _verifica_siruri                
     4                                  segment code use32 public code
     5                                  
     6                                  _verifica_siruri:  ;verifica_siruri(sir_1, sir_2)    
     7                                  
     8 00000000 B900000000                  mov ecx, 0
     9 00000005 8B4C2404                    mov ecx, [esp+4*1] ; sir 1
    10                                      
    11 00000009 BA00000000                  mov edx, 0
    12 0000000E 8B542408                    mov edx, [esp+4*2] ; sir 2
    13                                  
    14 00000012 89CE                        mov esi, ecx ; in esi vom avea primul sir
    15 00000014 89D7                        mov edi, edx ; in edi vom avea al doilea sir
    16                                      
    17 00000016 BB00000000                  mov ebx, 0  ; contor pentru sirul al doilea
    18 0000001B BA00000000                  mov edx, 0  ; contor pentru primul sir
    19                                      
    20                                      verifica:
    21 00000020 803C1F00                        cmp byte [edi+ebx], 0   ; verificam daca sirul al doilea este parcurs, daca da, atunci nu a fost gasit un subsir in sir
    22 00000024 7429                            je negasit
    23                                          
    24                                          ; verificam daca un caracter din primul sir se afla in al doilea sir, daca da trecem la bucla ok, altfel trecem la urmatorul caracter din sirul al doilea
    25 00000026 8A16                            mov dl, [esi+0]
    26 00000028 8A341F                          mov dh, [edi+ebx]
    27 0000002B 38F2                            cmp dl, dh
    28 0000002D 7403                            je ok
    29 0000002F 43                              inc ebx
    30 00000030 75EE                            jne verifica
    31                                      
    32                                      ok:
    33                                          ; daca primul sir a ajuns la final si nu s-a intors in bucla verifica, inseamna ca a fost gasit primul sir ca subsir in cel de-al doilea sir
    34 00000032 803C1E00                        cmp byte [esi+ebx], 0
    35 00000036 7414                            je gasit
    36                                      
    37                                          ; daca nu este gata primul sir, verificam daca urmatorul caracter din primul sir se afla in al doilea sir in continuarea celui precedent
    38 00000038 8A141E                          mov dl, [esi+ebx]
    39 0000003B 01D3                            add ebx, edx
    40 0000003D 8A341F                          mov dh, [edi+ebx]
    41                                          
    42 00000040 38F2                            cmp dl, dh
    43 00000042 42                              inc edx
    44 00000043 74ED                            je ok   ; daca este gasit intram din nou in ok
    45 00000045 BA00000000                      mov edx, 0
    46 0000004A 75D4                            jne verifica ; daca nu este gasit revenim in bucla verifica
    47                                      
    48                                      
    49                                      ; daca este gasit inregistram in al 1 si inchidem programul
    50                                      gasit:
    51 0000004C B001                            mov al, 1
    52 0000004E C3                              ret 
    53                                      
    54                                      ; daca nu este gasit inregistram in al 0 si inchidem programul
    55                                      negasit: 
    56 0000004F B000                            mov al, 0
    57 00000051 C3                              ret 
    58                                          
