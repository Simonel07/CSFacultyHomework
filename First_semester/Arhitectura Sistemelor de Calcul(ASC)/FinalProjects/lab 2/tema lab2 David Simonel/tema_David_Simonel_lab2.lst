     1                                  ; Tema -> David Simonel-Olimpiu
     2                                  bits 32 
     3                                  global  start 
     4                                  
     5                                  extern  exit 
     6                                  import  exit msvcrt.dll
     7                                          
     8                                  segment  data use32 class=data ; segmentul de date in care se vor defini variabilele 
     9 00000000 0F                      	a  db 15
    10 00000001 07                      	b  db 7
    11 00000002 1C                          c  db 28
    12 00000003 04                          d  db 4
    13                                      
    14 00000004 1400                        A dw 20
    15 00000006 0900                        B dw 9
    16 00000008 2500                        C dw 37
    17 0000000A 0600                        D dw 6
    18                                  segment  code use32 class=code ; segmentul de cod
    19                                  start: 
    20                                  	;exercitiul 1(exercitii simple: 17 => 14+2)
    21 00000000 B800000000                  mov eax, 0
    22 00000005 B00E                        mov al, 14
    23 00000007 0407                        add al, 7
    24                                      
    25                                      ;exercitiul 2(adunari, scaderi, a,b,c,d - byte: 7 => c-(d+d+d)+(a-b)
    26 00000009 B000                        mov al, 0
    27 0000000B A0[03000000]                mov al, [d];al = d
    28 00000010 0205[03000000]              add al, [d];al = d+d
    29 00000016 0205[03000000]              add al, [d];al = d+d+d
    30                                      
    31 0000001C BA00000000                  mov edx, 0
    32 00000021 8A15[00000000]              mov dl, [a];dl = a
    33 00000027 2A15[01000000]              sub dl, [b];dl = a-b
    34                                      
    35 0000002D BB00000000                  mov ebx, 0
    36 00000032 8A1D[02000000]              mov bl, [c];bl = c
    37 00000038 28C3                        sub bl, al;bl = c-(d+d+d)
    38 0000003A 00D3                        add bl, dl;bl = c-(d+d+d)+(a-b)
    39                                      
    40                                      ;exercitiul 3(adunari, scaderi, a,b,c,d - word: 26 => (a+c)-(b+b+d))
    41                                      
    42 0000003C 66B80000                    mov ax, 0
    43 00000040 66A1[04000000]              mov ax, [A] ;ax = a
    44 00000046 660305[08000000]            add ax, [C] ;ax = a+c
    45                                      
    46 0000004D 66BB0000                    mov bx, 0
    47 00000051 668B1D[06000000]            mov bx, [B] ;bx = b
    48 00000058 66031D[06000000]            add bx, [B] ;bx = b+b
    49 0000005F 66031D[0A000000]            add bx, [D] ;bx = b+b+d
    50                                      
    51 00000066 6629D8                      sub ax, bx ;ax = (a+c)-(b+b+d)
    52                                      
    53                                      ;exercitiul 4(inumltiri, impartiri, a,b,c - byte, d - word: 23 => [(a+b)*3-c*2]+d
    54 00000069 B800000000                  mov eax, 0
    55 0000006E 66B80000                    mov ax, 0
    56 00000072 A0[00000000]                mov al, [a] ;al = a
    57 00000077 0205[01000000]              add al, [b] ;al = a+b
    58 0000007D B403                        mov ah, 3 ;ah = 3
    59 0000007F F6E4                        mul ah ;ax = (a+b)*3
    60                                      
    61 00000081 BB00000000                  mov ebx, 0
    62 00000086 6689C3                      mov bx, ax ;bx = ax
    63 00000089 A0[02000000]                mov al, [c] ;al = c
    64 0000008E B402                        mov ah, 2 ;ah = 2
    65 00000090 F6E4                        mul ah ;ax = c*2
    66                                      
    67 00000092 6629C3                      sub bx, ax ;bx = (a+b)*3-c*2
    68 00000095 66031D[0A000000]            add bx, [D] ;bx = [(a+b)*3-c*2]+d
    69                                      
    70                                      ;exercitiul 5(inumltiri, impartiri, a,b,c,d-byte, e,f,g,h-word : 5 => a*(b+c)+34
    71                                      
    72 0000009C B800000000                  mov eax, 0
    73 000000A1 A0[01000000]                mov al, [b] ;al = b
    74 000000A6 0205[02000000]              add al, [c] ;al = c
    75 000000AC 8A25[00000000]              mov ah, [a] ;ah = a
    76 000000B2 F6E4                        mul ah ;ax = a*(b+c)
    77 000000B4 6683C022                    add ax, 34 ;ax = a*(b+c)+34
    78                                  	
    79 000000B8 6A00                    	push   dword 0 ;se pune pe stiva codul de retur al functiei exit
    80 000000BA FF15[00000000]          	call   [exit] ;apelul functiei sistem exit pentru terminarea executiei programului
